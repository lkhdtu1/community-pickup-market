# Community Pickup Market Live Testing Script
# Run this after starting Docker Desktop manually

Write-Host "==========================================" -ForegroundColor Cyan
Write-Host "üöÄ COMMUNITY PICKUP MARKET LIVE TESTING" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""

Write-Host "üìã Pre-flight Check:" -ForegroundColor Yellow
Write-Host "‚úÖ Order flow producer ID bug fixed" -ForegroundColor Green
Write-Host "‚úÖ Backend server Route.get() error fixed" -ForegroundColor Green
Write-Host "‚úÖ Database migration script ready" -ForegroundColor Green
Write-Host ""

Write-Host "üîß Step 1: Starting Database..." -ForegroundColor Yellow
try {
    $dockerInfo = docker info 2>$null
    if ($dockerInfo) {
        Write-Host "‚úÖ Docker is running" -ForegroundColor Green
        docker-compose up -d db
        Write-Host "‚è≥ Waiting for database to start..." -ForegroundColor Yellow
        Start-Sleep -Seconds 15
        Write-Host "‚úÖ Database should be ready" -ForegroundColor Green
    } else {
        throw "Docker not running"
    }
} catch {
    Write-Host "‚ùå Docker not running. Please start Docker Desktop first." -ForegroundColor Red
    Write-Host "   Manual steps:" -ForegroundColor Yellow
    Write-Host "   1. Start Docker Desktop" -ForegroundColor Gray
    Write-Host "   2. Wait for green icon in system tray" -ForegroundColor Gray
    Write-Host "   3. Run this script again" -ForegroundColor Gray
    Read-Host "Press Enter to exit"
    exit 1
}

Write-Host ""
Write-Host "üóÑÔ∏è Step 2: Applying Database Migration..." -ForegroundColor Yellow
try {
    $psqlVersion = psql --version 2>$null
    if ($psqlVersion) {
        Write-Host "Applying producerId column migration..." -ForegroundColor Yellow
        psql -h localhost -U postgres -d community_market -f add-producer-id-to-cart-items.sql
        Write-Host "‚úÖ Migration applied" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è psql not found. Manual migration required:" -ForegroundColor Yellow
        Write-Host "   Option 1: Install PostgreSQL client tools" -ForegroundColor Gray
        Write-Host "   Option 2: Use Docker command:" -ForegroundColor Gray
        $dbContainer = docker-compose ps -q db
        Write-Host "   docker exec -i $dbContainer psql -U postgres -d community_market < add-producer-id-to-cart-items.sql" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ö†Ô∏è Migration step needs manual attention" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üñ•Ô∏è Step 3: Starting Backend Server..." -ForegroundColor Yellow
Write-Host "Opening new terminal for backend..." -ForegroundColor Gray
Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd 'd:\git\community-pickup-market\server'; npm run dev"

Start-Sleep -Seconds 5

Write-Host ""
Write-Host "üåê Step 4: Starting Frontend Server..." -ForegroundColor Yellow
Write-Host "Opening new terminal for frontend..." -ForegroundColor Gray
Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd 'd:\git\community-pickup-market'; npm run dev"

Write-Host ""
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host "üéØ READY FOR TESTING!" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üåê Frontend: http://localhost:5173" -ForegroundColor Green
Write-Host "üîß Backend:  http://localhost:3001" -ForegroundColor Green
Write-Host ""
Write-Host "üìù Testing Checklist:" -ForegroundColor Yellow
Write-Host "‚ñ° Login as customer" -ForegroundColor Gray
Write-Host "‚ñ° Browse products" -ForegroundColor Gray
Write-Host "‚ñ° Add items to cart" -ForegroundColor Gray
Write-Host "‚ñ° Proceed to checkout" -ForegroundColor Gray
Write-Host "‚ñ° Select pickup point" -ForegroundColor Gray
Write-Host "‚ñ° Confirm order (should work now!)" -ForegroundColor Gray
Write-Host "‚ñ° Login as producer" -ForegroundColor Gray
Write-Host "‚ñ° Test producer information management" -ForegroundColor Gray
Write-Host ""
Write-Host "üîç What to verify:" -ForegroundColor Yellow
Write-Host "‚úÖ No 'order incomplete' errors after pickup point selection" -ForegroundColor Green
Write-Host "‚úÖ Orders created with correct producer IDs (not hardcoded '1')" -ForegroundColor Green
Write-Host "‚úÖ Producer information CRUD operations work" -ForegroundColor Green
Write-Host "‚úÖ Cart items properly track producer ID" -ForegroundColor Green
Write-Host ""
Write-Host "üöÄ Servers are starting in new windows..." -ForegroundColor Cyan
Write-Host "Wait a few moments, then test the application!" -ForegroundColor Cyan

Read-Host "Press Enter to continue"
